<Category name='shortratemodels'>
  <description>functions to construct and use short-rate model objects.</description>
  <displayName>Short Rate Models</displayName>
  <xlFunctionWizardCategory>QuantLib - Financial</xlFunctionWizardCategory>
  <serializationIncludes>
    <include>qlo/shortratemodels.hpp</include>
    <include>qlo/indexes/iborindex.hpp</include>
    <include>qlo/optimization.hpp</include>
    <include>ql/models/shortrate/onefactormodels/vasicek.hpp</include>
    <include>ql/models/shortrate/onefactormodels/hullwhite.hpp</include>
    <include>ql/models/shortrate/twofactormodels/g2.hpp</include>
    <include>ql/termstructures/yieldtermstructure.hpp</include>
    <include>ql/indexes/iborindex.hpp</include>
    <include>ql/models/shortrate/calibrationhelpers/swaptionhelper.hpp</include>
  </serializationIncludes>
  <addinIncludes>
    <include>qlo/shortratemodels.hpp</include>
    <include>qlo/indexes/iborindex.hpp</include>
    <include>qlo/optimization.hpp</include>
    <include>ql/models/shortrate/onefactormodels/vasicek.hpp</include>
    <include>ql/models/shortrate/onefactormodels/hullwhite.hpp</include>
    <include>ql/models/shortrate/twofactormodels/g2.hpp</include>
    <include>ql/termstructures/yieldtermstructure.hpp</include>
    <include>ql/indexes/iborindex.hpp</include>
    <include>ql/models/shortrate/calibrationhelpers/swaptionhelper.hpp</include>
  </addinIncludes>
  <copyright>
    Copyright (C) 2006 Ferdinando Ametrano
    Copyright (C) 2005 Aurelien Chanudet
    Copyright (C) 2005 Eric Ehlers
    Copyright (C) 2006 Chiara Fornarola
  </copyright>

  <Functions>

    <Constructor name='qlHullWhite'>
      <libraryFunction>HullWhite</libraryFunction>
      <SupportedPlatforms>
        <!--SupportedPlatform name='Excel' calcInWizard='false'/-->
        <SupportedPlatform name='Excel'/>
        <SupportedPlatform name='Cpp'/>
        <SupportedPlatform name='Calc'/>
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='YieldCurve'   exampleValue ='EURYC'>
            <type>QuantLib::YieldTermStructure</type>
            <superType>libToHandle</superType>
            <tensorRank>scalar</tensorRank>
            <description>YieldTermStructure object ID.</description>
          </Parameter>
          <Parameter name='A' exampleValue ='0.03'>
            <type>double</type>
            <tensorRank>scalar</tensorRank>
            <description>a.</description>
          </Parameter>
          <Parameter name='Sigma' exampleValue ='0.15'>
            <type>double</type>
            <tensorRank>scalar</tensorRank>
            <description>volatility.</description>
          </Parameter>
        </Parameters>
      </ParameterList>
    </Constructor>

    <Constructor name='qlVasicek'>
      <libraryFunction>Vasicek</libraryFunction>
      <SupportedPlatforms>
        <!--SupportedPlatform name='Excel' calcInWizard='false'/-->
        <SupportedPlatform name='Excel'/>
        <SupportedPlatform name='Cpp'/>
        <SupportedPlatform name='Calc'/>
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='A' exampleValue ='0.03'>
            <type>double</type>
            <tensorRank>scalar</tensorRank>
            <description>mean reverting speed.</description>
          </Parameter>
          <Parameter name='B' exampleValue ='0.03'>
            <type>double</type>
            <tensorRank>scalar</tensorRank>
            <description>short-rate limit value.</description>
          </Parameter>
          <Parameter name='Lambda' exampleValue ='0.0'>
            <type>double</type>
            <tensorRank>scalar</tensorRank>
            <description>risk premium.</description>
          </Parameter>
          <Parameter name='Sigma' exampleValue ='0.15'>
            <type>double</type>
            <tensorRank>scalar</tensorRank>
            <description>volatility.</description>
          </Parameter>
        </Parameters>
      </ParameterList>
    </Constructor>

    <Procedure name='qlFuturesConvexityBias'>
      <description>Returns Futures convexity bias (ForwardRate = FuturesImpliedRate - ConvexityBias) calculated as in G. Kirikos, D. Novak, 'Convexity Conundrums', Risk Magazine, March 1997.</description>
      <alias>QuantLib::HullWhite::convexityBias</alias>
      <SupportedPlatforms>
        <!--SupportedPlatform name='Excel' calcInWizard='false'/-->
        <SupportedPlatform name='Excel'/>
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='FuturesPrice' exampleValue ='94.56'>
            <type>double</type>
            <tensorRank>scalar</tensorRank>
            <description>Futures price (e.g. 94.56).</description>
          </Parameter>
          <Parameter name='T1' exampleValue ='5.0'>
            <type>double</type>
            <tensorRank>scalar</tensorRank>
            <description>Maturity date of the futures contract in years(e.g. 5.0).</description>
          </Parameter>
          <Parameter name='T2' exampleValue ='5.25'>
            <type>double</type>
            <tensorRank>scalar</tensorRank>
            <description>Maturity of the underlying Libor deposit in years (e.g. 5.25).</description>
          </Parameter>
          <Parameter name='Sigma' exampleValue ='0.015'>
            <type>double</type>
            <tensorRank>scalar</tensorRank>
            <description>Hull-White volatility (e.g. 0.015).</description>
          </Parameter>
          <Parameter name='A' default='0.03'>
            <type>double</type>
            <tensorRank>scalar</tensorRank>
            <description>Hull-White mean reversion.</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Rate</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Procedure>

    <Constructor name='qlGTwo'>
      <libraryFunction>G2</libraryFunction>
      <SupportedPlatforms>
        <!--SupportedPlatform name='Excel' calcInWizard='false'/-->
        <SupportedPlatform name='Excel'/>
        <SupportedPlatform name='Cpp'/>
        <SupportedPlatform name='Calc'/>
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='YieldCurve'   exampleValue ='EURYC'>
            <type>QuantLib::YieldTermStructure</type>
            <superType>libToHandle</superType>
            <tensorRank>scalar</tensorRank>
            <description>YieldTermStructure object ID.</description>
          </Parameter>
          <Parameter name='A' exampleValue ='0.03'>
            <type>double</type>
            <tensorRank>scalar</tensorRank>
            <description>first mean reversion.</description>
          </Parameter>
          <Parameter name='Sigma' exampleValue ='0.01'>
            <type>double</type>
            <tensorRank>scalar</tensorRank>
            <description>first volatility.</description>
          </Parameter>
          <Parameter name='B' exampleValue ='0.3'>
            <type>double</type>
            <tensorRank>scalar</tensorRank>
            <description>second mean reversion.</description>
          </Parameter>
          <Parameter name='Eta' exampleValue ='0.01'>
            <type>double</type>
            <tensorRank>scalar</tensorRank>
            <description>second volatility.</description>
          </Parameter>
          <Parameter name='Rho' exampleValue ='-0.75'>
            <type>double</type>
            <tensorRank>scalar</tensorRank>
            <description>correlation.</description>
          </Parameter>
        </Parameters>
      </ParameterList>
    </Constructor>

    <Constructor name='qlGTwoSwaptionEngine'>
      <libraryFunction>G2SwaptionEngine</libraryFunction>
      <SupportedPlatforms>
        <!--SupportedPlatform name='Excel' calcInWizard='false'/-->
        <SupportedPlatform name='Excel'/>
        <SupportedPlatform name='Cpp'/>
        <SupportedPlatform name='Calc'/>
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='Model' >
            <type>QuantLib::G2</type>
            <tensorRank>scalar</tensorRank>
            <description>G2 model object ID.</description>
          </Parameter>
          <Parameter name='Range' exampleValue ='0.1'>
            <type>QuantLib::Real</type>
            <tensorRank>scalar</tensorRank>
            <description>range for integration.</description>
          </Parameter>
          <Parameter name='Intervalls' exampleValue ='100'>
            <type>QuantLib::Size</type>
            <tensorRank>scalar</tensorRank>
            <description>number of integration intervalls.</description>
          </Parameter>
        </Parameters>
      </ParameterList>
    </Constructor>

    <Constructor name='qlSwaptionHelper'>
      <libraryFunction>SwaptionHelper</libraryFunction>
      <SupportedPlatforms>
        <!--SupportedPlatform name='Excel' calcInWizard='false'/-->
        <SupportedPlatform name='Excel'/>
        <!--SupportedPlatform name='Cpp'/-->
        <!--SupportedPlatform name='Calc'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='ExerciseTenor' exampleValue='10Y'>
            <type>QuantLib::Period</type>
            <tensorRank>scalar</tensorRank>
            <description>Option exercise period.</description>
          </Parameter>
          <Parameter name='SwapTenor' exampleValue='5Y'>
            <type>QuantLib::Period</type>
            <tensorRank>scalar</tensorRank>
            <description>Underlying swap term period.</description>
          </Parameter>
          <Parameter name='Volatility' >
            <type>QuantLib::Quote</type>
            <superType>libToHandle</superType>
            <tensorRank>scalar</tensorRank>
            <description>shifted Black volatility quote.</description>
          </Parameter>
          <Parameter name='IborIndex' exampleValue='Euribor3M'>
            <type>QuantLib::IborIndex</type>
            <tensorRank>scalar</tensorRank>
            <description>IborIndex object ID.</description>
          </Parameter>
          <Parameter name='FixedLegTenor' exampleValue='5Y'>
            <type>QuantLib::Period</type>
            <tensorRank>scalar</tensorRank>
            <description>Underlying swap fixed leg period.</description>
          </Parameter>
          <Parameter name='FixedLegDayCounter' default='"30/360"'>
            <type>QuantLib::DayCounter</type>
            <tensorRank>scalar</tensorRank>
            <description>Fixed leg DayCounter ID.</description>
          </Parameter>
          <Parameter name='FloatLegDayCounter' default='"30/360"'>
            <type>QuantLib::DayCounter</type>
            <tensorRank>scalar</tensorRank>
            <description>Float leg DayCounter ID.</description>
          </Parameter>
          <Parameter name='YieldCurve'   exampleValue ='EURYC'>
            <type>QuantLib::YieldTermStructure</type>
            <superType>libToHandle</superType>
            <tensorRank>scalar</tensorRank>
            <description>YieldTermStructure object ID.</description>
          </Parameter>
          <Parameter name='CalibrationErrorType'   exampleValue ='RelativePriceError'>
            <type>QuantLib::BlackCalibrationHelper::CalibrationErrorType</type>
            <tensorRank>scalar</tensorRank>
            <description>Calibration error type.</description>
          </Parameter>
          <Parameter name='Strike' default='QuantLib::Null&lt;QuantLib::Rate&gt;()'>
            <type>QuantLib::Real</type>
            <tensorRank>scalar</tensorRank>
            <description>Swaption strike.</description>
          </Parameter>
          <Parameter name='Nominal' default='10000'>
            <type>QuantLib::Real</type>
            <tensorRank>scalar</tensorRank>
            <description>Notional value.</description>
          </Parameter>
          <Parameter name='VolatilityType' default='"Normal"'>
            <type>QuantLib::VolatilityType</type>
            <tensorRank>scalar</tensorRank>
            <description>displacement in a displaced diffusion model.</description>
          </Parameter>
          <Parameter name='Shift' default='0'>
            <type>QuantLib::Real</type>
            <tensorRank>scalar</tensorRank>
            <description>Shift for shifted Black volatility.</description>
          </Parameter>
        </Parameters>
      </ParameterList>
    </Constructor>

    <Member name='qlGTwoDiscountBond' type='QuantLib::G2' >
      <description>Returns P(t,T;x).</description>
      <libraryFunction>discountBond</libraryFunction>
      <SupportedPlatforms>
        <!--SupportedPlatform name='Excel' calcInWizard='false'/-->
        <SupportedPlatform name='Excel'/>
        <!--SupportedPlatform name='Calc'/-->
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='ObservationTime' exampleValue ='1.0' default='1.0'>
            <type>QuantLib::Time</type>
            <tensorRank>scalar</tensorRank>
            <description>observation time.</description>
          </Parameter>
          <Parameter name='MaturityTime' exampleValue ='2.0' default='2.0'>
            <type>QuantLib::Time</type>
            <tensorRank>scalar</tensorRank>
            <description>maturity time.</description>
          </Parameter>
          <Parameter name='State' >
            <type>QuantLib::Array</type>
            <tensorRank>vector</tensorRank>
            <description>vector of state variables.</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Real</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlGTwoA' type='QuantLib::G2' >
      <description>Return first mean reversion.</description>
      <libraryFunction>a</libraryFunction>
      <SupportedPlatforms>
        <!--SupportedPlatform name='Excel' calcInWizard='false'/-->
        <SupportedPlatform name='Excel'/>
        <!--SupportedPlatform name='Calc'/-->
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Real</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlGTwoSigma' type='QuantLib::G2' >
      <description>Return first volatility.</description>
      <libraryFunction>sigma</libraryFunction>
      <SupportedPlatforms>
        <!--SupportedPlatform name='Excel' calcInWizard='false'/-->
        <SupportedPlatform name='Excel'/>
        <!--SupportedPlatform name='Calc'/-->
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Real</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlGTwoB' type='QuantLib::G2' >
      <description>Return second mean reversion.</description>
      <libraryFunction>b</libraryFunction>
      <SupportedPlatforms>
        <!--SupportedPlatform name='Excel' calcInWizard='false'/-->
        <SupportedPlatform name='Excel'/>
        <!--SupportedPlatform name='Calc'/-->
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Real</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlGTwoEta' type='QuantLib::G2' >
      <description>Return second volatility.</description>
      <libraryFunction>eta</libraryFunction>
      <SupportedPlatforms>
        <!--SupportedPlatform name='Excel' calcInWizard='false'/-->
        <SupportedPlatform name='Excel'/>
        <!--SupportedPlatform name='Calc'/-->
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Real</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlGTwoRho' type='QuantLib::G2' >
      <description>Return correlation.</description>
      <libraryFunction>rho</libraryFunction>
      <SupportedPlatforms>
        <!--SupportedPlatform name='Excel' calcInWizard='false'/-->
        <SupportedPlatform name='Excel'/>
        <!--SupportedPlatform name='Calc'/-->
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Real</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlGTwoCalibrate' type='QuantLibAddin::G2' >
      <description>Calibrate model to (shifted) log vols.</description>
      <libraryFunction>calibrate</libraryFunction>
      <SupportedPlatforms>
        <!--SupportedPlatform name='Excel' calcInWizard='false'/-->
        <SupportedPlatform name='Excel'/>
        <!--SupportedPlatform name='Calc'/-->
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='CalibHelpers' >
            <type>QuantLib::BlackCalibrationHelper</type>
            <tensorRank>vector</tensorRank>
            <description>reference to calibration helpers.</description>
          </Parameter>
          <Parameter name='OptimizationMethod' >
            <type>QuantLib::OptimizationMethod</type>
            <tensorRank>scalar</tensorRank>
            <description>reference to optimization method (e.g. Levenberg Marquart).</description>
          </Parameter>
          <Parameter name='EndCriteria' >
            <type>QuantLib::EndCriteria</type>
            <tensorRank>scalar</tensorRank>
            <description>reference to end criteria.</description>
          </Parameter>
          <Parameter name='Weights' >
            <type>QuantLib::Real</type>
            <tensorRank>vector</tensorRank>
            <description>calibration weights for calibration helpers.</description>
          </Parameter>
          <Parameter name='FixParameters' >
            <type>bool</type>
            <tensorRank>vector</tensorRank>
            <description>flags if (a,sigma,b,eta,rho) is fixed in calibration.</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>void</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>



  </Functions>
</Category>
