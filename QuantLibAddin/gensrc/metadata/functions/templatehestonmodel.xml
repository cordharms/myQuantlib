<Category name='templatehestonmodel'>
  <description>functions and methods for Heston-style models.</description>
  <displayName>Heston Model</displayName>
  <xlFunctionWizardCategory>QuantLib - Financial</xlFunctionWizardCategory>
  <serializationIncludes>
    <include>qlo/conversions/coercetermstructure.hpp</include>
    <include>qlo/baseinstruments.hpp</include>
    <include>qlo/termstructures.hpp</include>
    <include>qlo/pricingengines.hpp</include>
    <include>qlo/processes.hpp</include>
    <include>qlo/bonds.hpp</include>
    <include>qlo/templatehestonmodel.hpp</include>
    <include>qlo/volatilities.hpp</include>
    <include>ql/termstructures/volatility/equityfx/localvoltermstructure.hpp</include>
  </serializationIncludes>
  <addinIncludes>
    <include>qlo/handleimpl.hpp</include>
    <include>qlo/conversions/coercetermstructure.hpp</include>
    <include>qlo/baseinstruments.hpp</include>
    <include>qlo/termstructures.hpp</include>
    <include>qlo/pricingengines.hpp</include>
    <include>qlo/bonds.hpp</include>
    <include>qlo/templatehestonmodel.hpp</include>
    <include>qlo/volatilities.hpp</include>
    <include>qlo/processes.hpp</include>
    <include>ql/termstructures/volatility/equityfx/localvoltermstructure.hpp</include>
  </addinIncludes>
  <copyright>
    Copyright (C) 2012, Sebastian Schlenkrich
  </copyright>
  <Functions>
  
    <Constructor name='qlHestonProcess'>
      <libraryFunction>HestonProcess</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel'/>
        <SupportedPlatform name='Cpp'/>
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='RiskFreeRate'>
            <type>QuantLib::YieldTermStructure</type>
            <superType>libToHandle</superType>
            <tensorRank>scalar</tensorRank>
            <description>YieldTermStructure for discounting.</description>
          </Parameter>
          <Parameter name='DividendYield'>
            <type>QuantLib::YieldTermStructure</type>
            <superType>libToHandle</superType>
            <tensorRank>scalar</tensorRank>
            <description>YieldTermStructure for dividends.</description>
          </Parameter>
          <Parameter name='S0'>
            <type>QuantLib::Quote</type>
            <superType>libToHandle</superType>
            <tensorRank>scalar</tensorRank>
            <description>Asset initial state S(0).</description>
          </Parameter>
          <Parameter name='V0' default='0.15' const='False'>
            <type>QuantLib::Real</type>
            <tensorRank>scalar</tensorRank>
            <description>Volatility initial state v(0).</description>
          </Parameter>
          <Parameter name='Kappa' default='0.10' const='False'>
            <type>QuantLib::Real</type>
            <tensorRank>scalar</tensorRank>
            <description>Volatility mean reversion speed.</description>
          </Parameter>
          <Parameter name='Theta' default='0.15' const='False'>
            <type>QuantLib::Real</type>
            <tensorRank>scalar</tensorRank>
            <description>Volatility mean reversion level.</description>
          </Parameter>
          <Parameter name='Sigma' default='0.50' const='False'>
            <type>QuantLib::Real</type>
            <tensorRank>scalar</tensorRank>
            <description>Volatility of volatility.</description>
          </Parameter>
          <Parameter name='Rho' default='0.00' const='False'>
            <type>QuantLib::Real</type>
            <tensorRank>scalar</tensorRank>
            <description>Instantanous asset vol correlation.</description>
          </Parameter>
        </Parameters>
      </ParameterList>
    </Constructor>

    <Constructor name='qlHestonModel'>
      <libraryFunction>HestonModel</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel'/>
        <SupportedPlatform name='Cpp'/>
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='HestonProcess'>
            <type>QuantLib::HestonProcess</type>
            <tensorRank>scalar</tensorRank>
            <description>Reference to Heston process.</description>
          </Parameter>
        </Parameters>
      </ParameterList>
    </Constructor>

    <Constructor name='qlHestonSLVProcess'>
      <libraryFunction>HestonSLVProcess</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel'/>
        <SupportedPlatform name='Cpp'/>
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='HestonProcess'>
            <type>QuantLib::HestonProcess</type>
            <tensorRank>scalar</tensorRank>
            <description>HestonProcess.</description>
          </Parameter>
          <Parameter name='LeverageFunction' >
            <type>QuantLib::LocalVolTermStructure</type>
            <tensorRank>scalar</tensorRank>
            <description>LeverageFunction.</description>
          </Parameter>
        </Parameters>
      </ParameterList>
    </Constructor>

    <Member name='qlCalibrationHelperModelValue' type='QuantLib::BlackCalibrationHelper' >
      <description>return model value.</description>
      <libraryFunction>modelValue</libraryFunction>
      <SupportedPlatforms>
        <!--SupportedPlatform name='Excel' calcInWizard='false'/-->
        <SupportedPlatform name='Excel'/>
        <!--SupportedPlatform name='Calc'/-->
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Real</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlCalibrationHelperMarketValue' type='QuantLib::BlackCalibrationHelper' >
      <description>return model value.</description>
      <libraryFunction>marketValue</libraryFunction>
      <SupportedPlatforms>
        <!--SupportedPlatform name='Excel' calcInWizard='false'/-->
        <SupportedPlatform name='Excel'/>
        <!--SupportedPlatform name='Calc'/-->
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Real</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>
    
    <Member name='qlHestonModelTheta' type='QuantLib::HestonModel' >
      <description>return Heston Model theta.</description>
      <libraryFunction>theta</libraryFunction>
      <SupportedPlatforms>
        <!--SupportedPlatform name='Excel' calcInWizard='false'/-->
        <SupportedPlatform name='Excel'/>
        <!--SupportedPlatform name='Calc'/-->
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Real</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlHestonModelKappa' type='QuantLib::HestonModel' >
      <description>return Heston Model kappa.</description>
      <libraryFunction>kappa</libraryFunction>
      <SupportedPlatforms>
        <!--SupportedPlatform name='Excel' calcInWizard='false'/-->
        <SupportedPlatform name='Excel'/>
        <!--SupportedPlatform name='Calc'/-->
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Real</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlHestonModelSigma' type='QuantLib::HestonModel' >
      <description>return Heston Model sigma.</description>
      <libraryFunction>sigma</libraryFunction>
      <SupportedPlatforms>
        <!--SupportedPlatform name='Excel' calcInWizard='false'/-->
        <SupportedPlatform name='Excel'/>
        <!--SupportedPlatform name='Calc'/-->
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Real</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlHestonModelRho' type='QuantLib::HestonModel' >
      <description>return Heston Model rho.</description>
      <libraryFunction>rho</libraryFunction>
      <SupportedPlatforms>
        <!--SupportedPlatform name='Excel' calcInWizard='false'/-->
        <SupportedPlatform name='Excel'/>
        <!--SupportedPlatform name='Calc'/-->
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Real</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlHestonModelV0' type='QuantLib::HestonModel' >
      <description>return Heston Model v0.</description>
      <libraryFunction>v0</libraryFunction>
      <SupportedPlatforms>
        <!--SupportedPlatform name='Excel' calcInWizard='false'/-->
        <SupportedPlatform name='Excel'/>
        <!--SupportedPlatform name='Calc'/-->
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Real</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>



    <Member name='qlHestonModelCalibrate' type='QuantLibAddin::HestonModel' >
      <description>Calibrate a Heston Model.</description>
      <libraryFunction>calibrate</libraryFunction>
      <SupportedPlatforms>
        <!--SupportedPlatform name='Excel' calcInWizard='false'/-->
        <SupportedPlatform name='Excel'/>
        <!--SupportedPlatform name='Calc'/-->
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='BlackCalibrationHelper' >
            <type>QuantLib::BlackCalibrationHelper</type>
            <tensorRank>vector</tensorRank>
            <description>vector of Helper IDs.</description>
          </Parameter>
          <Parameter name='OptimizationMethod' >
            <type>QuantLib::OptimizationMethod</type>
            <tensorRank>scalar</tensorRank>
            <description>optimization method.</description>
          </Parameter>
          <Parameter name='EndCriteria' >
            <type>QuantLib::EndCriteria</type>
            <tensorRank>scalar</tensorRank>
            <description>end criteria for optimization.</description>
          </Parameter>
          <Parameter name='Weights' >
            <type>QuantLib::Real</type>
            <tensorRank>vector</tensorRank>
            <description>vector weights for options.</description>
          </Parameter>
          <Parameter name='FixParameters' >
            <type>bool</type>
            <tensorRank>vector</tensorRank>
            <description>flags if (theta,kappa,sigma,rho,v0) is fixed in calibration.</description>
          </Parameter>
          <Parameter name='HestonRelTolerance' >
            <type>QuantLib::Real</type>
            <tensorRank>scalar</tensorRank>
            <description>relative tolerance for Heston Vanilla pricing.</description>
          </Parameter>
          <Parameter name='HestonMaxEvaluations' >
            <type>QuantLib::Size</type>
            <tensorRank>scalar</tensorRank>
            <description>maximum function evaluations for Heston Vanilla pricing.</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>void</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Constructor name='qlAnalyticHestonEngine'>
      <libraryFunction>AnalyticHestonEngine</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel'/>
        <SupportedPlatform name='Cpp'/>
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='HestonModel'>
            <type>QuantLib::HestonModel</type>
            <tensorRank>scalar</tensorRank>
            <description>Reference to Heston model.</description>
          </Parameter>
          <Parameter name='RelTolerance'>
            <type>QuantLib::Real</type>
            <tensorRank>scalar</tensorRank>
            <description>Relative tolerance for numeric integration.</description>
          </Parameter>
          <Parameter name='MaxEvaluations'>
            <type>QuantLib::Size</type>
            <tensorRank>scalar</tensorRank>
            <description>Maximal number of function evaluations in numeric integration.</description>
          </Parameter>
        </Parameters>
      </ParameterList>
    </Constructor>

    <Constructor name='qlHestonModelHelper'>
      <libraryFunction>HestonModelHelper</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel'/>
        <SupportedPlatform name='Cpp'/>
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='Maturity'>
            <type>QuantLib::Period</type>
            <tensorRank>scalar</tensorRank>
            <description>Option maturty.</description>
          </Parameter>
          <Parameter name='Calendar'>
            <type>QuantLib::Calendar</type>
            <tensorRank>scalar</tensorRank>
            <description>Calender for maturity date calculation.</description>
          </Parameter>
          <Parameter name='S0' exampleValue='1'>
            <type>QuantLib::Quote</type>
            <superType>libToHandle</superType>
            <tensorRank>scalar</tensorRank>
            <description>Underlying spot.</description>
          </Parameter>
          <Parameter name='Strike' exampleValue='1'>
            <type>QuantLib::Real</type>
            <tensorRank>scalar</tensorRank>
            <description>Option strike.</description>
          </Parameter>
          <Parameter name='BlackVol' exampleValue='1'>
            <type>QuantLib::Quote</type>
            <superType>libToHandle</superType>
            <tensorRank>scalar</tensorRank>
            <description>Underlying spot.</description>
          </Parameter>
          <Parameter name='DiscountingCurve' >
            <type>QuantLib::YieldTermStructure</type>
            <superType>libToHandle</superType>
            <tensorRank>scalar</tensorRank>
            <description>discounting YieldTermStructure object ID.</description>
          </Parameter>
          <Parameter name='DividendCurve' >
            <type>QuantLib::YieldTermStructure</type>
            <superType>libToHandle</superType>
            <tensorRank>scalar</tensorRank>
            <description>dividend YieldTermStructure object ID.</description>
          </Parameter>
          <Parameter name='CalibrationErrorType'   exampleValue ='RelativePriceError'>
            <type>QuantLib::BlackCalibrationHelper::CalibrationErrorType</type>
            <tensorRank>scalar</tensorRank>
            <description>Calibration error type.</description>
          </Parameter>
        </Parameters>
      </ParameterList>
    </Constructor>

    <Member name='qlHestonModelHelperSetPricingEngine' type='QuantLib::HestonModelHelper' >
      <description>Set pricing engine with model.</description>
      <libraryFunction>setPricingEngine</libraryFunction>
      <SupportedPlatforms>
        <!--SupportedPlatform name='Excel' calcInWizard='false'/-->
        <SupportedPlatform name='Excel'/>
        <!--SupportedPlatform name='Calc'/-->
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='PricingEngine' >
            <type>QuantLib::PricingEngine</type>
            <tensorRank>scalar</tensorRank>
            <description>Pricing engine ID.</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>void</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Constructor name='qlHestonBlackVolSurface'>
      <libraryFunction>HestonBlackVolSurface</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel'/>
        <SupportedPlatform name='Cpp'/>
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='HestonModel' >
            <type>QuantLib::HestonModel</type>
            <superType>libToHandle</superType>
            <tensorRank>scalar</tensorRank>
            <description>HestonModel object ID.</description>
          </Parameter>
        </Parameters>
      </ParameterList>
    </Constructor>



    <Constructor name='qlRealHestonModel'>
      <libraryFunction>RealHestonModel</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel'/>
        <SupportedPlatform name='Cpp'/>
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='Kappa' default='0.10' const='False'>
            <type>QuantLib::Real</type>
            <tensorRank>scalar</tensorRank>
            <description>Volatility mean reversion speed.</description>
          </Parameter>
          <Parameter name='Theta' default='0.15' const='False'>
            <type>QuantLib::Real</type>
            <tensorRank>scalar</tensorRank>
            <description>Volatility mean reversion level.</description>
          </Parameter>
          <Parameter name='Sigma' default='0.50' const='False'>
            <type>QuantLib::Real</type>
            <tensorRank>scalar</tensorRank>
            <description>Volatility of volatility.</description>
          </Parameter>
          <Parameter name='Rho' default='0.00' const='False'>
            <type>QuantLib::Real</type>
            <tensorRank>scalar</tensorRank>
            <description>Instantanous asset vol correlation.</description>
          </Parameter>
          <Parameter name='V0' default='0.15' const='False'>
            <type>QuantLib::Real</type>
            <tensorRank>scalar</tensorRank>
            <description>Volatility initial state v(0).</description>
          </Parameter>
        </Parameters>
      </ParameterList>
    </Constructor>

    <!-- RealHestonModel interface -->
    <Member name='qlRealHestonModelVanillaOption' type='QuantLib::RealHestonModel' >
      <description>Returns a future zero coupon bond price in the Hull White model.</description>
      <libraryFunction>vanillaOption</libraryFunction>
      <SupportedPlatforms>
        <!--SupportedPlatform name='Excel' calcInWizard='false'/-->
        <SupportedPlatform name='Excel'/>
        <!--SupportedPlatform name='Calc'/-->
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='ForwardPrice' exampleValue ='1.0' default='1.0'>
            <type>QuantLib::Real</type>
            <tensorRank>scalar</tensorRank>
            <description>Forward price of underlying asset.</description>
          </Parameter>
          <Parameter name='StrikePrice' exampleValue ='1.0' default='1.0'>
            <type>QuantLib::Real</type>
            <tensorRank>scalar</tensorRank>
            <description>Strike price of option.</description>
          </Parameter>
          <Parameter name='Term' exampleValue ='1.0' default='1.0'>
            <type>QuantLib::Time</type>
            <tensorRank>scalar</tensorRank>
            <description>Time to exercise (in year fraction).</description>
          </Parameter>
          <Parameter name='CallOrPut' exampleValue ='1' default='1'>
            <type>long</type>
            <tensorRank>scalar</tensorRank>
            <description>Call (1) or Put (-1) option.</description>
          </Parameter>
          <Parameter name='Accuracy' exampleValue ='1.0e-4' default='1.0e-4'>
            <type>QuantLib::Real</type>
            <tensorRank>scalar</tensorRank>
            <description>Accuracy for integration.</description>
          </Parameter>
          <Parameter name='MaxEvaluations' exampleValue ='1000' default='1000'>
            <type>long</type>
            <tensorRank>scalar</tensorRank>
            <description>Maximum number of integrand function evaluations in integration.</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Real</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Constructor name='qlActiveHestonModel'>
      <libraryFunction>ActiveHestonModel</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel'/>
        <SupportedPlatform name='Cpp'/>
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='Kappa' default='0.10' const='False'>
            <type>QuantLib::Real</type>
            <tensorRank>scalar</tensorRank>
            <description>Volatility mean reversion speed.</description>
          </Parameter>
          <Parameter name='Theta' default='0.15' const='False'>
            <type>QuantLib::Real</type>
            <tensorRank>scalar</tensorRank>
            <description>Volatility mean reversion level.</description>
          </Parameter>
          <Parameter name='Sigma' default='0.50' const='False'>
            <type>QuantLib::Real</type>
            <tensorRank>scalar</tensorRank>
            <description>Volatility of volatility.</description>
          </Parameter>
          <Parameter name='Rho' default='0.00' const='False'>
            <type>QuantLib::Real</type>
            <tensorRank>scalar</tensorRank>
            <description>Instantanous asset vol correlation.</description>
          </Parameter>
          <Parameter name='V0' default='0.15' const='False'>
            <type>QuantLib::Real</type>
            <tensorRank>scalar</tensorRank>
            <description>Volatility initial state v(0).</description>
          </Parameter>
        </Parameters>
      </ParameterList>
    </Constructor>

    <!-- ActiveHestonModel interface -->
    <Member name='qlActiveHestonModelVanillaOption' type='QuantLib::ActiveHestonModel' >
      <description>Returns a future zero coupon bond price in the Hull White model.</description>
      <libraryFunction>vanillaOption</libraryFunction>
      <SupportedPlatforms>
        <!--SupportedPlatform name='Excel' calcInWizard='false'/-->
        <SupportedPlatform name='Excel'/>
        <!--SupportedPlatform name='Calc'/-->
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='ForwardPrice' exampleValue ='1.0' default='1.0'>
            <type>QuantLib::Real</type>
            <tensorRank>scalar</tensorRank>
            <description>Forward price of underlying asset.</description>
          </Parameter>
          <Parameter name='StrikePrice' exampleValue ='1.0' default='1.0'>
            <type>QuantLib::Real</type>
            <tensorRank>scalar</tensorRank>
            <description>Strike price of option.</description>
          </Parameter>
          <Parameter name='Term' exampleValue ='1.0' default='1.0'>
            <type>QuantLib::Time</type>
            <tensorRank>scalar</tensorRank>
            <description>Time to exercise (in year fraction).</description>
          </Parameter>
          <Parameter name='CallOrPut' exampleValue ='1' default='1'>
            <type>long</type>
            <tensorRank>scalar</tensorRank>
            <description>Call (+1) or Put (-1) option.</description>
          </Parameter>
          <Parameter name='Accuracy' exampleValue ='1.0e-4' default='1.0e-4'>
            <type>QuantLib::Real</type>
            <tensorRank>scalar</tensorRank>
            <description>Accuracy for integration.</description>
          </Parameter>
          <Parameter name='MaxEvaluations' exampleValue ='1000' default='1000'>
            <type>long</type>
            <tensorRank>scalar</tensorRank>
            <description>Maximum number of integrand function evaluations in integration.</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Real</type>
        <tensorRank>vector</tensorRank>
      </ReturnValue>
    </Member>


    <Constructor name='qlRealStochVolModel'>
      <libraryFunction>RealStochVolModel</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel'/>
        <SupportedPlatform name='Cpp'/>
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='Lambda' exampleValue ='0.10' default='0.10' >
            <type>QuantLib::Real</type>
            <tensorRank>scalar</tensorRank>
            <description>(log-) volatility.</description>
          </Parameter>
          <Parameter name='B' exampleValue ='0.50' default='0.50' >
            <type>QuantLib::Real</type>
            <tensorRank>scalar</tensorRank>
            <description>skew, 0...1 (normal ... log-normal).</description>
          </Parameter>
          <Parameter name='L' exampleValue ='1.0' default='1.0' >
            <type>QuantLib::Real</type>
            <tensorRank>scalar</tensorRank>
            <description>level, L = S0.</description>
          </Parameter>
            <Parameter name='Theta' exampleValue ='0.1' default='0.1' >
              <type>QuantLib::Real</type>
              <tensorRank>scalar</tensorRank>
              <description>mean reversion speed.</description>
            </Parameter>
            <Parameter name='M' exampleValue ='1.0' default='1.0' >
              <type>QuantLib::Real</type>
              <tensorRank>scalar</tensorRank>
              <description>mean reversion level (equal initial stoch vol).</description>
            </Parameter>
            <Parameter name='Eta' exampleValue ='1.0' default='1.0' >
              <type>QuantLib::Real</type>
              <tensorRank>scalar</tensorRank>
              <description>vol-of-vol.</description>
            </Parameter>
            <Parameter name='Z0' exampleValue ='1.0' default='1.0' >
              <type>QuantLib::Real</type>
              <tensorRank>scalar</tensorRank>
              <description>initial stoch vol.</description>
            </Parameter>
            <Parameter name='Rho' exampleValue ='0.0' default='0.0' >
              <type>QuantLib::Real</type>
              <tensorRank>scalar</tensorRank>
              <description>correlation.</description>
            </Parameter>
          </Parameters>
      </ParameterList>
    </Constructor>

    <Member name='qlRealStochVolModelVanillaOption' type='QuantLib::RealStochVolModel' >
      <description>Returns a future zero coupon bond price in the Hull White model.</description>
      <libraryFunction>vanillaOption</libraryFunction>
      <SupportedPlatforms>
        <!--SupportedPlatform name='Excel' calcInWizard='false'/-->
        <SupportedPlatform name='Excel'/>
        <!--SupportedPlatform name='Calc'/-->
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='ForwardPrice' exampleValue ='1.0' default='1.0'>
            <type>QuantLib::Real</type>
            <tensorRank>scalar</tensorRank>
            <description>Forward price of underlying asset.</description>
          </Parameter>
          <Parameter name='StrikePrice' exampleValue ='1.0' default='1.0'>
            <type>QuantLib::Real</type>
            <tensorRank>scalar</tensorRank>
            <description>Strike price of option.</description>
          </Parameter>
          <Parameter name='Term' exampleValue ='1.0' default='1.0'>
            <type>QuantLib::Time</type>
            <tensorRank>scalar</tensorRank>
            <description>Time to exercise (in year fraction).</description>
          </Parameter>
          <Parameter name='CallOrPut' exampleValue ='1' default='1'>
            <type>long</type>
            <tensorRank>scalar</tensorRank>
            <description>Call (+1) or Put (-1) option.</description>
          </Parameter>
          <Parameter name='Accuracy' exampleValue ='1.0e-4' default='1.0e-4'>
            <type>QuantLib::Real</type>
            <tensorRank>scalar</tensorRank>
            <description>Accuracy for integration.</description>
          </Parameter>
          <Parameter name='MaxEvaluations' exampleValue ='1000' default='1000'>
            <type>long</type>
            <tensorRank>scalar</tensorRank>
            <description>Maximum number of integrand function evaluations in integration.</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Real</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>


    <Constructor name='qlRealPWCStochVolModel'>
      <libraryFunction>RealPWCStochVolModel</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel'/>
        <SupportedPlatform name='Cpp'/>
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='Times' >
            <type>QuantLib::Time</type>
            <tensorRank>vector</tensorRank>
            <description>time grid for model parameters (in year fractions).</description>
          </Parameter>
          <Parameter name='Lambda' >
            <type>QuantLib::Real</type>
            <tensorRank>vector</tensorRank>
            <description>vector of (log-) volatilities.</description>
          </Parameter>
          <Parameter name='B' >
            <type>QuantLib::Real</type>
            <tensorRank>vector</tensorRank>
            <description>skew vector, 0...1 (normal ... log-normal).</description>
          </Parameter>
          <Parameter name='Eta' exampleValue ='1.0' default='1.0' >
            <type>QuantLib::Real</type>
            <tensorRank>vector</tensorRank>
            <description>vector of vol-of-vol.</description>
          </Parameter>
          <Parameter name='L' exampleValue ='1.0' default='1.0' >
            <type>QuantLib::Real</type>
            <tensorRank>scalar</tensorRank>
            <description>level, L = S0.</description>
          </Parameter>
          <Parameter name='Theta' exampleValue ='0.1' default='0.1' >
            <type>QuantLib::Real</type>
            <tensorRank>scalar</tensorRank>
            <description>mean reversion speed.</description>
          </Parameter>
          <Parameter name='M' exampleValue ='1.0' default='1.0' >
            <type>QuantLib::Real</type>
            <tensorRank>scalar</tensorRank>
            <description>mean reversion level (equal initial stoch vol).</description>
          </Parameter>
          <Parameter name='Z0' exampleValue ='1.0' default='1.0' >
            <type>QuantLib::Real</type>
            <tensorRank>scalar</tensorRank>
            <description>initial stoch vol.</description>
          </Parameter>
          <Parameter name='Rho' exampleValue ='0.0' default='0.0' >
            <type>QuantLib::Real</type>
            <tensorRank>scalar</tensorRank>
            <description>correlation.</description>
          </Parameter>
          <Parameter name='S0' exampleValue ='1.0' default='1.0' >
            <type>QuantLib::Real</type>
            <tensorRank>scalar</tensorRank>
            <description>initial asset value.</description>
          </Parameter>
          <Parameter name='VolEvolvType' >
            <type>QuantLib::RealStochasticProcess::VolEvolv</type>
            <tensorRank>scalar</tensorRank>
            <description>FullTruncation or LogNormalApproximation.</description>
          </Parameter>
        </Parameters>
      </ParameterList>
    </Constructor>


    <Member name='qlRealTDStochVolModelAverageLambda' type='QuantLib::RealTDStochVolModel' >
      <description>Returns average volatility.</description>
      <libraryFunction>averageLambda</libraryFunction>
      <SupportedPlatforms>
        <!--SupportedPlatform name='Excel' calcInWizard='false'/-->
        <SupportedPlatform name='Excel'/>
        <!--SupportedPlatform name='Calc'/-->
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='Term' exampleValue ='1.0' default='1.0'>
            <type>QuantLib::Time</type>
            <tensorRank>scalar</tensorRank>
            <description>Time to exercise (in year fraction).</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Real</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlRealTDStochVolModelAverageB' type='QuantLib::RealTDStochVolModel' >
      <description>Returns average volatility.</description>
      <libraryFunction>averageB</libraryFunction>
      <SupportedPlatforms>
        <!--SupportedPlatform name='Excel' calcInWizard='false'/-->
        <SupportedPlatform name='Excel'/>
        <!--SupportedPlatform name='Calc'/-->
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='Term' exampleValue ='1.0' default='1.0'>
            <type>QuantLib::Time</type>
            <tensorRank>scalar</tensorRank>
            <description>Time to exercise (in year fraction).</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Real</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    
    <Member name='qlRealTDStochVolModelAverageEta' type='QuantLib::RealTDStochVolModel' >
      <description>Returns average volatility.</description>
      <libraryFunction>averageEta</libraryFunction>
      <SupportedPlatforms>
        <!--SupportedPlatform name='Excel' calcInWizard='false'/-->
        <SupportedPlatform name='Excel'/>
        <!--SupportedPlatform name='Calc'/-->
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='Term' exampleValue ='1.0' default='1.0'>
            <type>QuantLib::Time</type>
            <tensorRank>scalar</tensorRank>
            <description>Time to exercise (in year fraction).</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Real</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlRealTDStochVolModelVanillaOption' type='QuantLib::RealTDStochVolModel' >
      <description>Returns a future zero coupon bond price in the Hull White model.</description>
      <libraryFunction>vanillaOption</libraryFunction>
      <SupportedPlatforms>
        <!--SupportedPlatform name='Excel' calcInWizard='false'/-->
        <SupportedPlatform name='Excel'/>
        <!--SupportedPlatform name='Calc'/-->
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='ForwardPrice' exampleValue ='1.0' default='1.0'>
            <type>QuantLib::Real</type>
            <tensorRank>scalar</tensorRank>
            <description>Forward price of underlying asset.</description>
          </Parameter>
          <Parameter name='StrikePrice' exampleValue ='1.0' default='1.0'>
            <type>QuantLib::Real</type>
            <tensorRank>scalar</tensorRank>
            <description>Strike price of option.</description>
          </Parameter>
          <Parameter name='Term' exampleValue ='1.0' default='1.0'>
            <type>QuantLib::Time</type>
            <tensorRank>scalar</tensorRank>
            <description>Time to exercise (in year fraction).</description>
          </Parameter>
          <Parameter name='CallOrPut' exampleValue ='1' default='1'>
            <type>long</type>
            <tensorRank>scalar</tensorRank>
            <description>Call (+1) or Put (-1) option.</description>
          </Parameter>
          <Parameter name='Accuracy' exampleValue ='1.0e-4' default='1.0e-4'>
            <type>QuantLib::Real</type>
            <tensorRank>scalar</tensorRank>
            <description>Accuracy for integration.</description>
          </Parameter>
          <Parameter name='MaxEvaluations' exampleValue ='1000' default='1000'>
            <type>long</type>
            <tensorRank>scalar</tensorRank>
            <description>Maximum number of integrand function evaluations in integration.</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Real</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <!-- further inspectors
    // abstract inspectors
    virtual ActiveType  lambda( const DateType t) = 0;
    virtual ActiveType  b(      const DateType t) = 0;
    virtual ActiveType  L()                       = 0;
    virtual ActiveType  theta()                   = 0;
    virtual ActiveType  m()                       = 0;
    virtual ActiveType  eta(    const DateType t) = 0;
    virtual ActiveType  z0()                      = 0;
    virtual ActiveType  rho()                     = 0;
    virtual ActiveType  S0()                      = 0;
    -->

    <Member name='qlRealTDStochVolModelLambda' type='QuantLib::RealTDStochVolModel' >
      <description>Returns volatility at time t.</description>
      <libraryFunction>lambda</libraryFunction>
      <SupportedPlatforms>
        <!--SupportedPlatform name='Excel' calcInWizard='false'/-->
        <SupportedPlatform name='Excel'/>
        <!--SupportedPlatform name='Calc'/-->
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='Time' exampleValue ='1.0' default='1.0'>
            <type>QuantLib::Time</type>
            <tensorRank>scalar</tensorRank>
            <description>observation time (in year fraction).</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Real</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlRealTDStochVolModelB' type='QuantLib::RealTDStochVolModel' >
      <description>Returns skew parameter at time t.</description>
      <libraryFunction>b</libraryFunction>
      <SupportedPlatforms>
        <!--SupportedPlatform name='Excel' calcInWizard='false'/-->
        <SupportedPlatform name='Excel'/>
        <!--SupportedPlatform name='Calc'/-->
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='Time' exampleValue ='1.0' default='1.0'>
            <type>QuantLib::Time</type>
            <tensorRank>scalar</tensorRank>
            <description>observation time (in year fraction).</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Real</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlRealTDStochVolModelEta' type='QuantLib::RealTDStochVolModel' >
      <description>Returns vol-of-vol at time t.</description>
      <libraryFunction>eta</libraryFunction>
      <SupportedPlatforms>
        <!--SupportedPlatform name='Excel' calcInWizard='false'/-->
        <SupportedPlatform name='Excel'/>
        <!--SupportedPlatform name='Calc'/-->
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='Time' exampleValue ='1.0' default='1.0'>
            <type>QuantLib::Time</type>
            <tensorRank>scalar</tensorRank>
            <description>observation time (in year fraction).</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Real</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlRealTDStochVolModelL' type='QuantLib::RealTDStochVolModel' >
      <description>Returns absolute vol level.</description>
      <libraryFunction>L</libraryFunction>
      <SupportedPlatforms>
        <!--SupportedPlatform name='Excel' calcInWizard='false'/-->
        <SupportedPlatform name='Excel'/>
        <!--SupportedPlatform name='Calc'/-->
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters/>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Real</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlRealTDStochVolModelTheta' type='QuantLib::RealTDStochVolModel' >
      <description>Returns vol reversion speed.</description>
      <libraryFunction>theta</libraryFunction>
      <SupportedPlatforms>
        <!--SupportedPlatform name='Excel' calcInWizard='false'/-->
        <SupportedPlatform name='Excel'/>
        <!--SupportedPlatform name='Calc'/-->
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters/>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Real</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlRealTDStochVolModelM' type='QuantLib::RealTDStochVolModel' >
      <description>Returns vol reversion level.</description>
      <libraryFunction>m</libraryFunction>
      <SupportedPlatforms>
        <!--SupportedPlatform name='Excel' calcInWizard='false'/-->
        <SupportedPlatform name='Excel'/>
        <!--SupportedPlatform name='Calc'/-->
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters/>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Real</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlRealTDStochVolModelZ0' type='QuantLib::RealTDStochVolModel' >
      <description>Returns initial stoch vol.</description>
      <libraryFunction>z0</libraryFunction>
      <SupportedPlatforms>
        <!--SupportedPlatform name='Excel' calcInWizard='false'/-->
        <SupportedPlatform name='Excel'/>
        <!--SupportedPlatform name='Calc'/-->
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters/>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Real</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlRealTDStochVolModelS0' type='QuantLib::RealTDStochVolModel' >
      <description>Returns initial asset value.</description>
      <libraryFunction>S0</libraryFunction>
      <SupportedPlatforms>
        <!--SupportedPlatform name='Excel' calcInWizard='false'/-->
        <SupportedPlatform name='Excel'/>
        <!--SupportedPlatform name='Calc'/-->
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters/>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Real</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlRealTDStochVolModelRho' type='QuantLib::RealTDStochVolModel' >
      <description>Returns asset vs. vol correlation.</description>
      <libraryFunction>rho</libraryFunction>
      <SupportedPlatforms>
        <!--SupportedPlatform name='Excel' calcInWizard='false'/-->
        <SupportedPlatform name='Excel'/>
        <!--SupportedPlatform name='Calc'/-->
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters/>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Real</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Constructor name='qlRealShiftedSABRModel'>
      <libraryFunction>RealShiftedSABRModel</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel'/>
        <SupportedPlatform name='Cpp'/>
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='S0' exampleValue ='1.0' default='1.0' >
            <type>QuantLib::Real</type>
            <tensorRank>scalar</tensorRank>
            <description>initial asset value.</description>
          </Parameter>
          <Parameter name='Lambda' exampleValue ='0.0' default='0.0' >
            <type>QuantLib::Real</type>
            <tensorRank>scalar</tensorRank>
            <description>diffusion shift parameter.</description>
          </Parameter>
          <Parameter name='Alpha' exampleValue ='1.0' default='1.0' >
            <type>QuantLib::Real</type>
            <tensorRank>scalar</tensorRank>
            <description>initial volatility value.</description>
          </Parameter>
          <Parameter name='Beta' exampleValue ='0.5' default='0.5' >
            <type>QuantLib::Real</type>
            <tensorRank>scalar</tensorRank>
            <description>elasticity parameter.</description>
          </Parameter>
          <Parameter name='Rho' exampleValue ='0.5' default='0.5' >
            <type>QuantLib::Real</type>
            <tensorRank>scalar</tensorRank>
            <description>asset vs volatility correlation.</description>
          </Parameter>
          <Parameter name='Nu' exampleValue ='1.0' default='1.0' >
            <type>QuantLib::Real</type>
            <tensorRank>scalar</tensorRank>
            <description>volatilty of volatility.</description>
          </Parameter>
        </Parameters>
      </ParameterList>
    </Constructor>

    <Constructor name='qlRealQuadraticLVSVModel'>
      <libraryFunction>RealQuadraticLVSVModel</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel'/>
        <SupportedPlatform name='Cpp'/>
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='S0' exampleValue ='1.0' default='1.0' >
            <type>QuantLib::Real</type>
            <tensorRank>scalar</tensorRank>
            <description>initial asset value.</description>
          </Parameter>
          <Parameter name='Curv' exampleValue ='0.0' default='0.0' >
            <type>QuantLib::Real</type>
            <tensorRank>scalar</tensorRank>
            <description>Curvature 0.5*curv*(S-S0)^2.</description>
          </Parameter>
          <Parameter name='Skew' exampleValue ='0.0' default='0.0' >
            <type>QuantLib::Real</type>
            <tensorRank>scalar</tensorRank>
            <description>Skew skew*(S-S0).</description>
          </Parameter>
          <Parameter name='Sigma0' exampleValue ='0.005' default='0.005' >
            <type>QuantLib::Real</type>
            <tensorRank>scalar</tensorRank>
            <description>Initial local volatility sigma(S0).</description>
          </Parameter>
          <Parameter name='Theta' exampleValue ='0.3' default='0.3' >
            <type>QuantLib::Real</type>
            <tensorRank>scalar</tensorRank>
            <description>Stoch-vol mean reversion.</description>
          </Parameter>
          <Parameter name='Nu' exampleValue ='0.5' default='0.5' >
            <type>QuantLib::Real</type>
            <tensorRank>scalar</tensorRank>
            <description>volatilty of volatility.</description>
          </Parameter>
          <Parameter name='Rho' exampleValue ='0.5' default='0.5' >
            <type>QuantLib::Real</type>
            <tensorRank>scalar</tensorRank>
            <description>asset vs volatility correlation.</description>
          </Parameter>
        </Parameters>
      </ParameterList>
    </Constructor>


    <!-- Stochastic model calibrator -->

    <Constructor name='qlStochVolModelCalibrator'>
      <libraryFunction>StochVolModelCalibrator</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel'/>
        <SupportedPlatform name='Cpp'/>
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='Lambda' exampleValue ='0.10' default='0.10' >
            <type>QuantLib::Real</type>
            <tensorRank>scalar</tensorRank>
            <description>(log-) volatility.</description>
          </Parameter>
          <Parameter name='B' exampleValue ='0.50' default='0.50' >
            <type>QuantLib::Real</type>
            <tensorRank>scalar</tensorRank>
            <description>skew, 0...1 (normal ... log-normal).</description>
          </Parameter>
          <Parameter name='L' exampleValue ='1.0' default='1.0' >
            <type>QuantLib::Real</type>
            <tensorRank>scalar</tensorRank>
            <description>level, L = S0.</description>
          </Parameter>
          <Parameter name='Theta' exampleValue ='0.1' default='0.1' >
            <type>QuantLib::Real</type>
            <tensorRank>scalar</tensorRank>
            <description>mean reversion speed.</description>
          </Parameter>
          <Parameter name='M' exampleValue ='1.0' default='1.0' >
            <type>QuantLib::Real</type>
            <tensorRank>scalar</tensorRank>
            <description>mean reversion level (equal initial stoch vol).</description>
          </Parameter>
          <Parameter name='Eta' exampleValue ='1.0' default='1.0' >
            <type>QuantLib::Real</type>
            <tensorRank>scalar</tensorRank>
            <description>vol-of-vol.</description>
          </Parameter>
          <Parameter name='Z0' exampleValue ='1.0' default='1.0' >
            <type>QuantLib::Real</type>
            <tensorRank>scalar</tensorRank>
            <description>initial stoch vol.</description>
          </Parameter>
          <Parameter name='Rho' exampleValue ='0.0' default='0.0' >
            <type>QuantLib::Real</type>
            <tensorRank>scalar</tensorRank>
            <description>correlation.</description>
          </Parameter>
          <Parameter name='LambdaIsFixed' exampleValue ='true' default='true' >
            <type>bool</type>
            <tensorRank>scalar</tensorRank>
            <description>return initial lambda</description>
          </Parameter>
          <Parameter name='BIsFixed' exampleValue ='true' default='true' >
            <type>bool</type>
            <tensorRank>scalar</tensorRank>
            <description>return initial b</description>
          </Parameter>
          <Parameter name='LIsFixed' exampleValue ='true' default='true' >
            <type>bool</type>
            <tensorRank>scalar</tensorRank>
            <description>return initial b</description>
          </Parameter>
          <Parameter name='ThetaIsFixed' exampleValue ='true' default='true' >
            <type>bool</type>
            <tensorRank>scalar</tensorRank>
            <description>return initial theta</description>
          </Parameter>
          <Parameter name='MIsFixed' exampleValue ='true' default='true' >
            <type>bool</type>
            <tensorRank>scalar</tensorRank>
            <description>return initial m</description>
          </Parameter>
          <Parameter name='EtaIsFixed' exampleValue ='true' default='true' >
            <type>bool</type>
            <tensorRank>scalar</tensorRank>
            <description>return initial eta</description>
          </Parameter>
          <Parameter name='Z0IsFixed' exampleValue ='true' default='true' >
            <type>bool</type>
            <tensorRank>scalar</tensorRank>
            <description>return initial z0</description>
          </Parameter>
          <Parameter name='RhoIsFixed' exampleValue ='true' default='true' >
            <type>bool</type>
            <tensorRank>scalar</tensorRank>
            <description>return initial rho</description>
          </Parameter>
          <Parameter name='ExercTime' exampleValue ='1.0' default='1.0' >
            <type>QuantLib::Real</type>
            <tensorRank>scalar</tensorRank>
            <description>option exercise time (in year fractions).</description>
          </Parameter>
          <Parameter name='Forward' exampleValue ='1.0' default='1.0' >
            <type>QuantLib::Real</type>
            <tensorRank>scalar</tensorRank>
            <description>forward price or rate.</description>
          </Parameter>
          <Parameter name='Strikes' >
            <type>QuantLib::Real</type>
            <tensorRank>vector</tensorRank>
            <description>option strikes.</description>
          </Parameter>
          <Parameter name='Vols' >
            <type>QuantLib::Real</type>
            <tensorRank>vector</tensorRank>
            <description>option target normal volatilities.</description>
          </Parameter>
          <Parameter name='OptimizationParams' >
            <type>QuantLib::Real</type>
            <tensorRank>vector</tensorRank>
            <description>[ min(8), max(8), epsfcn, ftol, xtol, gtol, maxfev, glAbsAcc, glMaxEval ]</description>
          </Parameter>
        </Parameters>
      </ParameterList>
    </Constructor>

    <!-- StochVolModelCalibrator inspectors -->
    
    <Member name='qlStochVolModelCalibratorLambda' type='QuantLib::StochVolModelCalibrator' >
      <description>Returns lambda.</description>
      <libraryFunction>lambda</libraryFunction>
      <SupportedPlatforms>
        <!--SupportedPlatform name='Excel' calcInWizard='false'/-->
        <SupportedPlatform name='Excel'/>
        <!--SupportedPlatform name='Calc'/-->
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters/>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Real</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlStochVolModelCalibratorB' type='QuantLib::StochVolModelCalibrator' >
      <description>Returns b.</description>
      <libraryFunction>b</libraryFunction>
      <SupportedPlatforms>
        <!--SupportedPlatform name='Excel' calcInWizard='false'/-->
        <SupportedPlatform name='Excel'/>
        <!--SupportedPlatform name='Calc'/-->
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters/>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Real</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlStochVolModelCalibratorL' type='QuantLib::StochVolModelCalibrator' >
      <description>Returns L.</description>
      <libraryFunction>L</libraryFunction>
      <SupportedPlatforms>
        <!--SupportedPlatform name='Excel' calcInWizard='false'/-->
        <SupportedPlatform name='Excel'/>
        <!--SupportedPlatform name='Calc'/-->
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters/>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Real</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlStochVolModelCalibratorTheta' type='QuantLib::StochVolModelCalibrator' >
      <description>Returns theta.</description>
      <libraryFunction>theta</libraryFunction>
      <SupportedPlatforms>
        <!--SupportedPlatform name='Excel' calcInWizard='false'/-->
        <SupportedPlatform name='Excel'/>
        <!--SupportedPlatform name='Calc'/-->
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters/>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Real</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlStochVolModelCalibratorM' type='QuantLib::StochVolModelCalibrator' >
      <description>Returns mean reversion level m.</description>
      <libraryFunction>m</libraryFunction>
      <SupportedPlatforms>
        <!--SupportedPlatform name='Excel' calcInWizard='false'/-->
        <SupportedPlatform name='Excel'/>
        <!--SupportedPlatform name='Calc'/-->
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters/>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Real</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlStochVolModelCalibratorEta' type='QuantLib::StochVolModelCalibrator' >
      <description>Returns vol of vol eta.</description>
      <libraryFunction>eta</libraryFunction>
      <SupportedPlatforms>
        <!--SupportedPlatform name='Excel' calcInWizard='false'/-->
        <SupportedPlatform name='Excel'/>
        <!--SupportedPlatform name='Calc'/-->
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters/>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Real</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlStochVolModelCalibratorZ0' type='QuantLib::StochVolModelCalibrator' >
      <description>Returns vol of vol z0.</description>
      <libraryFunction>z0</libraryFunction>
      <SupportedPlatforms>
        <!--SupportedPlatform name='Excel' calcInWizard='false'/-->
        <SupportedPlatform name='Excel'/>
        <!--SupportedPlatform name='Calc'/-->
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters/>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Real</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlStochVolModelCalibratorRho' type='QuantLib::StochVolModelCalibrator' >
      <description>Returns vol of vol rho.</description>
      <libraryFunction>rho</libraryFunction>
      <SupportedPlatforms>
        <!--SupportedPlatform name='Excel' calcInWizard='false'/-->
        <SupportedPlatform name='Excel'/>
        <!--SupportedPlatform name='Calc'/-->
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters/>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Real</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>


  <!-- Local-Stochastic-Vol model -->

    <Constructor name='qlHestonSLVFokkerPlanckFdmParams'>
      <libraryFunction>HestonSLVFokkerPlanckFdmParams</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel'/>
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='XGrd' exampleValue ='201' default='201' >
            <type>QuantLib::Size</type>
            <tensorRank>scalar</tensorRank>
            <description>number of underlying grid points.</description>
          </Parameter>
          <Parameter name='VGrd' exampleValue ='301' default='301' >
            <type>QuantLib::Size</type>
            <tensorRank>scalar</tensorRank>
            <description>number of volatility grid points.</description>
          </Parameter>
          <Parameter name='TMax' exampleValue ='1000' default='1000' >
            <type>QuantLib::Size</type>
            <tensorRank>scalar</tensorRank>
            <description>maximum number of time steps per year.</description>
          </Parameter>
          <Parameter name='TMin' exampleValue ='25' default='25' >
            <type>QuantLib::Size</type>
            <tensorRank>scalar</tensorRank>
            <description>maximum number of time steps per year.</description>
          </Parameter>
          <Parameter name='TDecay' exampleValue ='3.0' default='30' >
            <type>QuantLib::Real</type>
            <tensorRank>scalar</tensorRank>
            <description>time grid step number decay.</description>
          </Parameter>
          <Parameter name='PCs' exampleValue ='2' default='2' >
            <type>QuantLib::Size</type>
            <tensorRank>scalar</tensorRank>
            <description>number of predictor-corrector steps.</description>
          </Parameter>
          <Parameter name='X0Dens' exampleValue ='0.1' default='0.1' >
            <type>QuantLib::Real</type>
            <tensorRank>scalar</tensorRank>
            <description>x0 density.</description>
          </Parameter>
          <Parameter name='EpsP' exampleValue ='1.0e-4' default='1.0e-4' >
            <type>QuantLib::Real</type>
            <tensorRank>scalar</tensorRank>
            <description>local vol epsilon probability.</description>
          </Parameter>
          <Parameter name='IIters' exampleValue ='10000' default='10000' >
            <type>QuantLib::Size</type>
            <tensorRank>scalar</tensorRank>
            <description>maximum integration iterations.</description>
          </Parameter>
          <Parameter name='VLEps' exampleValue ='1.0e-8' default='1.0e-8' >
            <type>QuantLib::Real</type>
            <tensorRank>scalar</tensorRank>
            <description>volatity lower epsilon.</description>
          </Parameter>
          <Parameter name='VUEps' exampleValue ='1.0e-8' default='1.0e-8' >
            <type>QuantLib::Real</type>
            <tensorRank>scalar</tensorRank>
            <description>volatity upper epsilon.</description>
          </Parameter>
          <Parameter name='VMin' exampleValue ='0.0' default='0.0' >
            <type>QuantLib::Real</type>
            <tensorRank>scalar</tensorRank>
            <description>minimum volatility.</description>
          </Parameter>
          <Parameter name='V0Dens' exampleValue ='1.0' default='1.0' >
            <type>QuantLib::Real</type>
            <tensorRank>scalar</tensorRank>
            <description>v0 density.</description>
          </Parameter>
          <Parameter name='VLBD' exampleValue ='1.0' default='1.0' >
            <type>QuantLib::Real</type>
            <tensorRank>scalar</tensorRank>
            <description>volatility lower boundary density.</description>
          </Parameter>
          <Parameter name='VUBD' exampleValue ='1.0' default='1.0' >
            <type>QuantLib::Real</type>
            <tensorRank>scalar</tensorRank>
            <description>volatility upper boundary density.</description>
          </Parameter>
          <Parameter name='LFPEps' exampleValue ='1.0e-6' default='1.0e-6' >
            <type>QuantLib::Real</type>
            <tensorRank>scalar</tensorRank>
            <description>leverage function probability epsilon.</description>
          </Parameter>
          <Parameter name='GAlg' exampleValue ='Gaussian' default='"Gaussian"' >
            <type>string</type>
            <tensorRank>scalar</tensorRank>
            <description>Greens algorithm ID.</description>
          </Parameter>
          <Parameter name='TType' exampleValue ='Plain' default='"Plain"' >
            <type>string</type>
            <tensorRank>scalar</tensorRank>
            <description>transformation type ID.</description>
          </Parameter>
          <Parameter name='SDesc' exampleValue ='ModifiedCraigSneyd' default='"ModifiedCraigSneyd"' >
            <type>string</type>
            <tensorRank>scalar</tensorRank>
            <description>ingegration scheme ID.</description>
          </Parameter>
        </Parameters>
      </ParameterList>
    </Constructor>

    <Constructor name='qlHestonSLVFokkerPlanckFdmParamsFromSet'>
      <libraryFunction>HestonSLVFokkerPlanckFdmParams</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel'/>
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='SetID' exampleValue ='Plain' default='"Plain"' >
            <type>string</type>
            <tensorRank>scalar</tensorRank>
            <description>transformation type ID.</description>
          </Parameter>
        </Parameters>
      </ParameterList>
    </Constructor>

    
    <Constructor name='qlHestonSLVFDMModel'>
      <libraryFunction>HestonSLVFDMModel</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel'/>
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='LocalVolTermStructure'>
            <type>QuantLib::LocalVolTermStructure</type>
            <superType>libToHandle</superType>
            <tensorRank>scalar</tensorRank>
            <description>Reference to leverage surface.</description>
          </Parameter>
          <Parameter name='HestonModel'>
            <type>QuantLib::HestonModel</type>
            <superType>libToHandle</superType>
            <tensorRank>scalar</tensorRank>
            <description>Reference to Heston model.</description>
          </Parameter>
          <Parameter name='EndDate'>
            <type>QuantLib::Date</type>
            <tensorRank>scalar</tensorRank>
            <description>Simulation end date.</description>
          </Parameter>
          <Parameter name='HestonSLVFokkerPlanckFdmParams'>
            <type>QuantLib::HestonSLVFokkerPlanckFdmParams</type>
            <superType>libraryClass</superType>
            <tensorRank>scalar</tensorRank>
            <description>Set ID of deep-in-the-model parameters.</description>
          </Parameter>
          <Parameter name='Logging'>
            <type>bool</type>
            <tensorRank>scalar</tensorRank>
            <description>Enable loggin.</description>
          </Parameter>
          <Parameter name='MandatoryDates'>
            <type>QuantLib::Date</type>
            <tensorRank>vector</tensorRank>
            <description>vector of mandatory modelled dates.</description>
          </Parameter>
        </Parameters>
      </ParameterList>
    </Constructor>


    <Constructor name='qlMultiAssetBSModel'>
      <libraryFunction>MultiAssetBSModel</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel'/>
        <SupportedPlatform name='Cpp'/>
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='DiscountCurve'>
            <type>QuantLib::YieldTermStructure</type>
            <superType>libToHandle</superType>
            <tensorRank>scalar</tensorRank>
            <description>YieldTermStructure for discounting.</description>
          </Parameter>
          <Parameter name='Aliases' >
            <type>string</type>
            <tensorRank>vector</tensorRank>
            <description>Aliases for underlying assets.</description>
          </Parameter>
          <Parameter name='GBSProcesses' >
            <type>QuantLib::GeneralizedBlackScholesProcess</type>
            <tensorRank>vector</tensorRank>
            <description>references to GeneralizedBlackScholesProcesses.</description>
          </Parameter>
          <Parameter name='Correlation' default='0.0'>
            <type>QuantLib::Time</type>
            <tensorRank>matrix</tensorRank>
            <description>Asset correlation matrix.</description>
          </Parameter>
        </Parameters>
      </ParameterList>
    </Constructor>

    <Constructor name='qlMultiAssetSLVModel'>
      <libraryFunction>MultiAssetSLVModel</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel'/>
        <SupportedPlatform name='Cpp'/>
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='DiscountCurve'>
            <type>QuantLib::YieldTermStructure</type>
            <superType>libToHandle</superType>
            <tensorRank>scalar</tensorRank>
            <description>YieldTermStructure for discounting.</description>
          </Parameter>
          <Parameter name='Aliases' >
            <type>string</type>
            <tensorRank>vector</tensorRank>
            <description>Aliases for underlying assets.</description>
          </Parameter>
          <Parameter name='SLVProcesses' >
            <type>QuantLib::HestonSLVProcess</type>
            <tensorRank>vector</tensorRank>
            <description>references to HestonSLVProcess.</description>
          </Parameter>
          <Parameter name='Correlation' default='0.0'>
            <type>QuantLib::Time</type>
            <tensorRank>matrix</tensorRank>
            <description>Asset correlation matrix.</description>
          </Parameter>
        </Parameters>
      </ParameterList>
    </Constructor>

    <Constructor name='qlHestonSLVMCModel'>
      <libraryFunction>HestonSLVMCModel</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel'/>
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='LocalVolTermStructure'>
            <type>QuantLib::LocalVolTermStructure</type>
            <superType>libToHandle</superType>
            <tensorRank>scalar</tensorRank>
            <description>Reference to leverage surface.</description>
          </Parameter>
          <Parameter name='HestonModel'>
            <type>QuantLib::HestonModel</type>
            <superType>libToHandle</superType>
            <tensorRank>scalar</tensorRank>
            <description>Reference to Heston model.</description>
          </Parameter>          
          <Parameter name='EndDate'>
            <type>QuantLib::Date</type>
            <tensorRank>scalar</tensorRank>
            <description>Simulation end date.</description>
          </Parameter>    
          <Parameter name='TimeStepsPerYear'>
            <type>QuantLib::Size</type>
            <tensorRank>scalar</tensorRank>
            <description>Number of time steps per year</description>
          </Parameter>
          <Parameter name='NBins'>
            <type>QuantLib::Size</type>
            <tensorRank>scalar</tensorRank>
            <description>tbd.</description>
          </Parameter>
          <Parameter name='CalibrationPaths'>
            <type>QuantLib::Size</type>
            <tensorRank>scalar</tensorRank>
            <description>Number of calibration paths</description>
          </Parameter>
          <Parameter name='MandatoryDates'>
            <type>QuantLib::Date</type>
            <tensorRank>vector</tensorRank>
            <description>vector of mandatory modelled dates.</description>
          </Parameter>
        </Parameters>
      </ParameterList>
    </Constructor>  
  </Functions>
</Category>
